export type Document = object | import("parse5").DefaultTreeDocument;
export type Node = object | import("parse5").DefaultTreeNode;
export type FileType = "module" | "script" | "es-module-shims" | "systemjs";
export type PolyfillsLoaderConfig = import("./types").PolyfillsLoaderConfig;
export const noModuleSupportTest: "!('noModule' in HTMLScriptElement.prototype)";
/** @type {Record<'SCRIPT' | 'MODULE' | 'ES_MODULE_SHIMS' | 'SYSTEMJS', FileType>} */
export const fileTypes: Record<'SCRIPT' | 'MODULE' | 'ES_MODULE_SHIMS' | 'SYSTEMJS', FileType>;
/**
 * @param {string} content
 * @returns {string}
 */
export function createContentHash(content: string): string;
/**
 * @param {string} importPath
 * @returns {string}
 */
export function cleanImportPath(importPath: string): string;
/**
 * @param {string} tag
 * @param {Record<string, string>} attributes
 * @returns {Node}
 */
export function createElement(tag: string, attributes: Record<string, string>): import("parse5").Node;
/**
 * @param {Record<string, string>} attributes
 * @param {string} [code]
 * @returns {Node}
 */
export function createScript(attributes: Record<string, string>, code?: string): import("parse5").Node;
/**
 * @param {string} code
 * @returns {Node}
 */
export function createModuleScript(code: string): import("parse5").Node;
/**
 * @param {Document} document
 * @returns {{ inline: Node[], external: Node[]}}
 */
export function findImportMapScripts(document: import("parse5").Document): {
    inline: import("parse5").Node[];
    external: import("parse5").Node[];
};
/**
 * Finds all js scripts in a document, returns the scripts sorted by loading priority.
 * @param {Document} document
 * @param {{ jsScripts?: boolean, jsModules?: boolean, inlineJsScripts?: boolean, inlineJsModules?: boolean }} [exclude]
 * @returns {Node[]}
 */
export function findJsScripts(document: import("parse5").Document, exclude?: {
    jsScripts?: boolean;
    jsModules?: boolean;
    inlineJsScripts?: boolean;
    inlineJsModules?: boolean;
}): import("parse5").Node[];
/**
 * @param {Node} script
 * @returns {FileType}
 */
export function getScriptFileType(script: import("parse5").Node): import("./types").FileType;
/**
 * @param {PolyfillsLoaderConfig} cfg
 * @param {FileType} type
 */
export function hasFileOfType(cfg: import("./types").PolyfillsLoaderConfig, type: import("./types").FileType): boolean;
/**
 * @param {string} filePath
 * @returns {string}
 */
export function toBrowserPath(filePath: string): string;
